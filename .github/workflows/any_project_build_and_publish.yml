name: Any Project - Build & Publish Nuget

on:
  workflow_dispatch:
    inputs:
      project_path:
        description: 'relative path from repo root to project file. Example: "./myService/myServiceApi.csproj"'
        required: true
      bump_type:
        description: "Version bump type ( MAJOR / MINOR / PATCH / NONE )"
        required: true

jobs:
  log_inputs:
    runs-on: ubuntu-latest

    steps:
      - name: log inputs
        run: |
          echo "-------------- inputs --------------"
          echo project_path: ${{ github.event.inputs.project_path }}
          echo bump_type: ${{ github.event.inputs.bump_type }}
          echo ""
          echo "-------------- other variables --------------"
          echo git ref: $GITHUB_REF
          echo git commit hash: $GITHUB_SHA

  Bump_Version:
    if: ${{ github.event.inputs.bump_type != 'NONE' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Get existing version
        run: |
          current_version=$(sed -n -e 's/[ ]*[<]AssemblyVersion[>]\([0-9.]\+\)[<][/]AssemblyVersion[>]/\1/p' ${{ github.event.inputs.project_path }})
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo current_version: $current_version
          if [ -z $current_version ]; then echo "error reading project version" 1>&2; exit 1; fi

      - name: Create new version
        run: |
          [[ "${{ env.current_version }}" =~ ([0-9]+).([0-9]+).([0-9]+)$ ]] && major="${BASH_REMATCH[1]}" && minor="${BASH_REMATCH[2]}" && patch="${BASH_REMATCH[3]}";
          if [ -z $major ] || [ -z $minor ] || [ -z $patch ]; then echo "invalid project version parts" 1>&2; exit 2; fi
          case ${{ github.event.inputs.bump_type }} in
            MAJOR)
              major=$(($major + 1))
              minor=0
              patch=0
          	;;
            MINOR)
              minor=$(($minor + 1))
              patch=0
          	;;
            PATCH)
              patch=$(($patch + 1))
          	;;
            *)
              echo "unrecognized input value for bump_type" 1>&2
              exit 3
          	;;
          esac
          new_version=$major.$minor.$patch
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo new_version: $new_version

      - name: Update version
        run: |
          sed -i -r s#\<AssemblyVersion\>[0-9.]+\<\/AssemblyVersion\>#\<AssemblyVersion\>$new_version\<\/AssemblyVersion\>#g ${{ github.event.inputs.project_path }}
          sed -i -r s#\<Version\>[0-9.]+\<\/Version\>#\<Version\>$new_version\<\/Version\>#g ${{ github.event.inputs.project_path }}
          sed -i -r s#\<PackageVersion\>[0-9.]+\<\/PackageVersion\>#\<PackageVersion\>$new_version\<\/PackageVersion\>#g ${{ github.event.inputs.project_path }}

      - name: Commit new version
        run: |
          git config user.name "Bump Version (GitHub Action)"
          git add ${{ github.event.inputs.project_path }}
          git status
          git_message=(v${{ env.current_version }}' => 'v${{ env.new_version }})
          echo $git_message
          git commit -m "$git_message"

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.PRIVILEGED_REPO_PAT }}
          branch: ${{ github.ref }}

  Pack_and_Push:
    if: ${{ github.event.inputs.bump_type == 'NONE' || success() }}
    needs: Bump_Version

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Add "GitHub Packages" NuGet Source
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/365Scores/index.json \
            -n github \
            -u ${{ secrets.PACKAGES_USERNAME }} \
            -p ${{ secrets.PACKAGES_PAT }} \
            --store-password-in-clear-text

      - name: Restore dependencies
        run: dotnet restore ${{ github.event.inputs.project_path }}

      - name: Build
        run: dotnet build --no-restore --configuration Release ${{ github.event.inputs.project_path }}

      - name: Pack
        run: dotnet pack --no-build --configuration Release -o ${{github.workspace}}/../Nugets ${{ github.event.inputs.project_path }}

      - name: Push package
        working-directory: ${{github.workspace}}/../Nugets
        run: dotnet nuget push "*.nupkg" -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/365Scores/index.json
